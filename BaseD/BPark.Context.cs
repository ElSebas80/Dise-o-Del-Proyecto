//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Diseño.BaseD
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class parkEntities : DbContext
    {
        public parkEntities()
            : base("name=parkEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CuentasUsuario> CuentasUsuario { get; set; }
    
        public virtual int sp_CuentasUsuario(string nombre, string apellido, Nullable<int> cedula, string direccion, string email, string loginN, string contra)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(int));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var loginNParameter = loginN != null ?
                new ObjectParameter("LoginN", loginN) :
                new ObjectParameter("LoginN", typeof(string));
    
            var contraParameter = contra != null ?
                new ObjectParameter("Contra", contra) :
                new ObjectParameter("Contra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CuentasUsuario", nombreParameter, apellidoParameter, cedulaParameter, direccionParameter, emailParameter, loginNParameter, contraParameter);
        }
    
        public virtual int sp_configuracion(string nombreParqueadero, string nit, Nullable<int> telefono, string direccion, string correo, string horarioAtencion)
        {
            var nombreParqueaderoParameter = nombreParqueadero != null ?
                new ObjectParameter("NombreParqueadero", nombreParqueadero) :
                new ObjectParameter("NombreParqueadero", typeof(string));
    
            var nitParameter = nit != null ?
                new ObjectParameter("Nit", nit) :
                new ObjectParameter("Nit", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var horarioAtencionParameter = horarioAtencion != null ?
                new ObjectParameter("HorarioAtencion", horarioAtencion) :
                new ObjectParameter("HorarioAtencion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_configuracion", nombreParqueaderoParameter, nitParameter, telefonoParameter, direccionParameter, correoParameter, horarioAtencionParameter);
        }
    
        public virtual int sp_tarifas(Nullable<System.DateTime> fecha, Nullable<decimal> horaEstacio, Nullable<decimal> semanaEstacio, Nullable<decimal> quincenaEstacio, Nullable<decimal> mensualidadEstacio, Nullable<int> cuposDIsponibles)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var horaEstacioParameter = horaEstacio.HasValue ?
                new ObjectParameter("HoraEstacio", horaEstacio) :
                new ObjectParameter("HoraEstacio", typeof(decimal));
    
            var semanaEstacioParameter = semanaEstacio.HasValue ?
                new ObjectParameter("SemanaEstacio", semanaEstacio) :
                new ObjectParameter("SemanaEstacio", typeof(decimal));
    
            var quincenaEstacioParameter = quincenaEstacio.HasValue ?
                new ObjectParameter("QuincenaEstacio", quincenaEstacio) :
                new ObjectParameter("QuincenaEstacio", typeof(decimal));
    
            var mensualidadEstacioParameter = mensualidadEstacio.HasValue ?
                new ObjectParameter("MensualidadEstacio", mensualidadEstacio) :
                new ObjectParameter("MensualidadEstacio", typeof(decimal));
    
            var cuposDIsponiblesParameter = cuposDIsponibles.HasValue ?
                new ObjectParameter("CuposDIsponibles", cuposDIsponibles) :
                new ObjectParameter("CuposDIsponibles", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_tarifas", fechaParameter, horaEstacioParameter, semanaEstacioParameter, quincenaEstacioParameter, mensualidadEstacioParameter, cuposDIsponiblesParameter);
        }
    
        public virtual int Sp_EditarContra(Nullable<int> id, string contra)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var contraParameter = contra != null ?
                new ObjectParameter("Contra", contra) :
                new ObjectParameter("Contra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_EditarContra", idParameter, contraParameter);
        }
    }
}
